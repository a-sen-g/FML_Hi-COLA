# Here quantities related to objects in reduced Horndeski action are defined
#### Give the model its name
model_name = 'cuGal_f0p8'

#######################
# Horndeski functions #
#######################

# See documentation for meaning of these functions
# The Horndeski functions should be defined in terms of phi, X (see functional dependence
# of the Horndeski functions in the reduced Horndeski action) and
# and real-valued constants. Any constants must be defined in the theory symbols
# that follows.

K = k_1*X
G3 = g_31*X
G4 = 0.5

##################
# Theory symbols #
##################
# Here you declare the symbols needed to construct your specific theory.
# Typically this involves giving names to the constants in the model.

#Syntax: left side is the variable name that python will call it by, right is a
# string that indicates how the symbol should be displayed (use LaTeX notation)
# the variable name (key) MUST end in "_symbol" (without quotation marks)
# The order in which these are written matter! The following section must have
# parameter values ordered in the same way as you choose to do for the symbols
# here.
k1_symbol = "k_1"
k2_symbol =  "k_2"

###############################
# Horndeski Parameter values  #
###############################
# Set values for the parameters, i.e. constants, introduced in your Horndeski function definitions.
# The key for these parameters must end in _parameter
# The order in which they are defined matter! The order must match the
# symbolic names for these parameters above
# One of these may be ignored if you choose to apply the closure constraint on
# a model parameter. You must still set a dummy value for this parameter though.

k1_parameter  = -4.963
g31_parameter = 1.654

##################################################
# Fraction of cosmological constant in Omega_DE0 #
##################################################

f_phi = 0.8

#######################
# Initial conditions #
#######################
# Set the initial values of the scalar field, its derivative and the Hubble function.
# One of these may be ignored if you choose to apply the closure constraint on
# an "odeint" variable. You must still set a dummy value for this variable though.

Hubble0 = 1./0.913

phiprime0 = 50.

###############
# Mass ratios #
###############
# If True, all mass ratios are set to 1 and values below are ignored
set_all_to_one = True

M_pG4 = 1.
M_KG4 = 1.
M_G3s = 1.
M_sG4 = 1.
M_G3G4 = 1.
M_Ks = 1.
M_gp = 1.

#######################
# Closure declaration #
#######################
# Here you decide which variable is solved for via the Friedmann-like closure equation

# This indicates that the variable to be chosen is either the Hubble function, phi_prime, Omega_m or Omega_r
# If this is false, then one of the Horndeski model parameters will be solved through the closure equation instead
use_constraint_eq_on_odeint_variables = True

# This specifies which odeint variable
# 0 = Hubble function; 1 = phi_prime; 2 = Omega_r; 3 = Omega_m
which_odeint_par = 1

# Relies on the order in which the Horndeski parameters are written above
# Only relevant if use_constraint_eq_on_odeint_parameters is False.
# e.g. which_Horndeski_par = 1 means the 2nd parameter of your model will be solved
# for via closure
which_Horndeski_par = 0

# Closure guess value
# This sets the initial guess for the variable that will be numerically solved for through
# the closure equation. This implies that one of the floats supplied as an initial condition
# or as a parameter value will be ignored and the guess_value, and then the result of solving
# the closure equation will be used instead.
closure_guess_value = 0.9
